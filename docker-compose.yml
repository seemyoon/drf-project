services:
  app:
    build:
      context: .
    volumes:
      - ./backend:/app
    env_file:
      - .env
    ports:
      - "8888:8000"
    restart: on-failure
    command: >
      sh -c "python manage.py wait_db && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  db:
    image: mysql:8
    env_file:
      - .env
    ports:
      - '3307:3306'
    volumes:
      - ./mysql:/var/lib/mysql
    restart: on-failure

  #   [localhost (Django)] --> [Container with MySQL]
  #   For the local Django program to reach the container with the DB, it was:
  #   MYSQL_HOST=127.0.0.1
  #   PORT=3307
  #   The db container forwarded port 3306 out to port 3307 and Django accessed 127.0.0.1:3307 as a "local" DB forwarded with Docker

  #   [Django container (app)] --> [Container with MySQL]
  #   They are in the same Docker network, and now 127.0.0.1 no longer works, because we have two containers that communicate with each other
  web:
    image: nginx:alpine
    ports:
      - '80:80'
    volumes:
      - ./client:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

  redis:
    image: redis:alpine

  celery: # the same settings
    build:
      context: .
    volumes:
      - ./backend:/app
    env_file:
      - .env
    restart: on-failure
    command: >
      sh -c "celery -A configs worker -l info -B"
#      flag -B set up celery_beat
#      sh -c "celery -A configs worker -l info"